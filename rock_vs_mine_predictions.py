# -*- coding: utf-8 -*-
"""Rock Vs Mine Predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qtRfgVhwudQ7o78_6YHYuQdmmn9xXnxf

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

#loading the dataset to a pandas Dataframe
sonar_data =pd.read_csv('/content/Copy of sonar data.csv',header = None)

sonar_data.head()

#number of rows and columns
sonar_data.shape

sonar_data.describe() #describe --> statistical data

sonar_data[60].value_counts()

"""M --> Mine
R--> Rocks
"""

sonar_data.groupby(60).mean()

#seperating data and Labels
X= sonar_data.drop(columns =60, axis=1)
Y= sonar_data[60]

print(X)
print(Y)

"""Training and Test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size =0.1,stratify = Y,random_state=1)

print(X.shape,X_train.shape,X_test.shape)

""" Model Training --> Logistic Regression Model"""

model = LogisticRegression()

#training the Logistic Regression Model with training data
model.fit(X_train,Y_train)

"""Model Evaluation"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data: ',training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data: ',test_data_accuracy)

"""Making a Predictive System"""

input_data = (0.0209,0.0261,0.0120,0.0768,0.1064,0.1680,0.3016,0.3460,0.3314,0.4125,0.3943,0.1334,0.4622,0.9970,0.9137,0.8292,0.6994,0.7825,0.8789,0.8501,0.8920,0.9473,1.0000,0.8975,0.7806,0.8321,0.6502,0.4548,0.4732,0.3391,0.2747,0.0978,0.0477,0.1403,0.1834,0.2148,0.1271,0.1912,0.3391,0.3444,0.2369,0.1195,0.2665,0.2587,0.1393,0.1083,0.1383,0.1321,0.1069,0.0325,0.0316,0.0057,0.0159,0.0085,0.0372,0.0101,0.0127,0.0288,0.0129,0.0023)

#changing the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

#reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='R'):
  print('The object is Rock')
else:
  print('The object is mine')

